;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Chadian Arabic
;;; created at:
;;;     Fri Jan 30 20:51:30 UTC 2015
;;; based on Matrix customization system version of:
;;;     Mon Jan 26 18:10:41 UTC 2015
;;;
;;; using Roman script orthography
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    FORM form,
    HEAD-INIT bool,
    WH-QUES bool].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.OPT -,
                                MC #mc ] ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

inflected :+ [ CONT_ACTION-FLAG luk,
   IMPERFECT_SUBJECT_SUF-FLAG luk,
    GEND_NUM_AGREE-FLAG luk,
    COMMON-NOUN-FLAG luk,
    IMPERFECT_SUBJECT_PRE-FLAG luk,
    PERFECT_SUBJECT-FLAG luk,
    NOUN_DEF-FLAG luk,
    ADJ_DEF-FLAG luk,
    LEX_OBJ_DROP_ALLOWED-FLAG luk,
    LEX_OBJ_DROP_BANNED-FLAG luk,
    PREP_PRED_RULE luk,
    PREP_OBJECT luk].

infl-satisfied :+ [ CONT_ACTION-FLAG na-or-+,
    IMPERFECT_SUBJECT_SUF-FLAG na-or-+,
    GEND_NUM_AGREE-FLAG na-or-+,
    COMMON-NOUN-FLAG na-or-+,
    IMPERFECT_SUBJECT_PRE-FLAG na-or-+,
    PERFECT_SUBJECT-FLAG na-or-+,
    NOUN_DEF-FLAG na-or-+,
    LEX_OBJ_DROP_ALLOWED-FLAG na-or-+,
    LEX_OBJ_DROP_BANNED-FLAG na-or-+,
    ADJ_DEF-FLAG na-or-+,
    PREP_PRED_RULE na-or-+,
    PREP_OBJECT na-or-+].

png :+ [ PER person,
    NUM number,
    GEND gender ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative

;;; Person

person := *top*.
2nd := person.
non-2nd := person.
3rd := non-2nd.
1st := non-2nd.

;;; Number

number := *top*.
Singular := number.
non-Singular := number.
Plural := non-Singular.
Dual := non-Singular.

;;; Gender

gender := *top*.
Masculine := gender.
Feminine := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Aspect

perfective := aspect.
imperfective := aspect.
no-aspect := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

Pronoun_2SG_M-noun-lex := sg-pronoun-noun-lex & 2nd-pronoun-noun-lex & MascNoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_2SG_F-noun-lex := sg-pronoun-noun-lex & 2nd-pronoun-noun-lex & FemNoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_3SG_M-noun-lex := sg-pronoun-noun-lex & 3rd-pronoun-noun-lex & MascNoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_3SG_F-noun-lex := sg-pronoun-noun-lex & 3rd-pronoun-noun-lex & FemNoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_1PL-noun-lex := pl-pronoun-noun-lex & 1st-pronoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_2PL-noun-lex := pl-pronoun-noun-lex & 2nd-pronoun-noun-lex & subj-pronoun-noun-lex.

Pronoun_3PL-noun-lex := pl-pronoun-noun-lex & 3rd-pronoun-noun-lex & subj-pronoun-noun-lex.

sg-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Singular ].

pl-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Plural ].

1st-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2nd-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3rd-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

FemNoun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND Feminine ].

MascNoun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND Masculine ].

subj-pronoun-noun-lex := Pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

Pronoun_1SG-noun-lex := sg-pronoun-noun-lex & 1st-pronoun-noun-lex & subj-pronoun-noun-lex.

masc-CommonNoun-noun-lex := MascNoun-noun-lex & CommonNoun-noun-lex.

Pronoun-noun-lex := no-spr-noun-lex &
 [ SYNSEM.LOCAL.CONT.HOOK.INDEX [ COG-ST activ-or-more,
   				  SPECI + ] ].

MascProperNoun-noun-lex := MascNoun-noun-lex & ProperNoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                       GEND Masculine ] ].

CommonNoun-noun-lex := noun-lex & noun_def-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ COMMON-NOUN-FLAG -,
    	        NOUN_DEF-FLAG - ] ].

FemProperNoun-noun-lex := FemNoun-noun-lex & ProperNoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                       GEND Feminine ] ].

fem-CommonNoun-noun-lex := FemNoun-noun-lex & CommonNoun-noun-lex.

pl-CommonNoun-noun-lex := CommonNoun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Plural ].

ProperNoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX [PNG.PER 3rd,
    				  COG-ST uniq-or-more] ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < unexpressed >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

clause-trans-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
[ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp >,
  ARG-ST < [LOCAL.CAT.HEAD noun], #comp & [LOCAL [CAT [HEAD +vjpc, MC -, VAL [ SUBJ < >, COMPS < > ]], 
					          CONT.HOOK.INDEX.SF prop-or-ques] ] > ,
  INFLECTED [LEX_OBJ_DROP_ALLOWED-FLAG -,
	     LEX_OBJ_DROP_BANNED-FLAG +]].

clause-ques-verb-lex := clause-trans-verb-lex &
[ SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CONT.HOOK.INDEX.SF ques] > ]. ; NON-LOCAL.QUE 0-dlist] >].

clause-decl-verb-lex := clause-trans-verb-lex &
[ SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CONT.HOOK.INDEX.SF prop] >].

PFV_clause-decl-verb-lex := clause-decl-verb-lex & Perfective-verb-lex.

PFV_clause-ques-verb-lex := clause-ques-verb-lex & Perfective-verb-lex.

IPFV_clause-decl-verb-lex := clause-decl-verb-lex & Imperfective-verb-lex.

IPFV_clause-ques-verb-lex := clause-ques-verb-lex & Imperfective-verb-lex.

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun,
    INFLECTED.LEX_OBJ_DROP_BANNED-FLAG + ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ]>].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

PFV_intrans-verb-lex := Perfective-verb-lex & nom-intransitive-verb-lex.

PFV_trans-verb-lex := Perfective-verb-lex & nom-acc-transitive-verb-lex &
[INFLECTED.LEX_OBJ_DROP_ALLOWED-FLAG +,
 INFLECTED.LEX_OBJ_DROP_BANNED-FLAG -].

IPFV_intrans-verb-lex := Imperfective-verb-lex & nom-intransitive-verb-lex.

IPFV_trans-verb-lex := Imperfective-verb-lex & nom-acc-transitive-verb-lex &
 [INFLECTED.LEX_OBJ_DROP_ALLOWED-FLAG +,
  INFLECTED.LEX_OBJ_DROP_BANNED-FLAG -].

Perfective-verb-lex := verb-lex & object_marker-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective,
    INFLECTED.PERFECT_SUBJECT-FLAG - ].

Imperfective-verb-lex := verb-lex & imperfect_subject_suf-rule-dtr & object_marker-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective,
    INFLECTED [ IMPERFECT_SUBJECT_PRE-FLAG -,
                IMPERFECT_SUBJECT_SUF-FLAG - ] ].

PFV_strict_trans-verb-lex := Perfective-verb-lex & strict_transitive-verb-lex & nom-acc-transitive-verb-lex.

strict_transitive-verb-lex := verb-lex &
  [ INFLECTED.LEX_OBJ_DROP_ALLOWED-FLAG -,
   INFLECTED.LEX_OBJ_DROP_BANNED-FLAG +].

IPFV_strict_trans-verb-lex := Imperfective-verb-lex & strict_transitive-verb-lex & nom-acc-transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < unexpressed >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb &
                                [ AUX - ],
                           VAL [ COMPS < >,
                                 SPR < unexpressed >,
                                 SPEC < >,
                                 SUBJ < unexpressed & [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item.

Continuous-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.ASPECT imperfective,
                                             CAT.HEAD.FORM finite ],
    INFLECTED.CONT_ACTION-FLAG - ].

;;; Adjectives

base-adj-lex := basic-intersective-adjective-lex & norm-zero-arg &
[ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                     HEAD.PRD - ],
  INFLECTED [ GEND_NUM_AGREE-FLAG -,
              ADJ_DEF-FLAG -] ].

adj-lex := base-adj-lex.

past_participle-adj-lex := base-adj-lex.

pres_participle-adj-lex := base-adj-lex.


;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker
remote+dem_a_rel := distal+dem_a_rel.      ; away from speaker and hearer
hearer+dem_a_rel := distal+dem_a_rel.      ; near hearer
mid+dem_a_rel := distal+dem_a_rel.         ; away, but not very far away
far+dem_a_rel := distal+dem_a_rel.         ; very far away


determiner-lex := norm-hook-lex-item & norm-zero-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD det,
			   VAL[ SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX #ind & [COG-ST activ+fam],
				  			     LTOP #larg ],
                                SPR < >,
                                SUBJ < >,
                                COMPS < > ] ],
		     CONT [ HCONS <! qeq &
				 [ HARG #harg,
				   LARG #larg ] !>,
		            RELS <! [ PRED "exist_q_rel"],
		     	       	 #altkey & arg1-ev-relation & [LBL #larg,  ARG1 #ind] !> ] ], 
	     LKEYS [KEYREL quant-relation &
		   	   [ ARG0 #ind,
		     	   RSTR #harg ],
	    	    ALTKEYREL #altkey ] ] ].

prox_determiner-lex := determiner-lex & no-icons-lex-item &
 [ SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel].

dist_determiner-lex := determiner-lex & no-icons-lex-item &
 [ SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel].

prox_msg_det-determiner-lex := prox_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Masculine ] ].

prox_fsg_det-determiner-lex := prox_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Feminine ] ].

prox_pl_det-determiner-lex := prox_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM non-Singular ].

dist_msg_det-determiner-lex := dist_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Masculine ] ].

dist_fsg_det-determiner-lex := dist_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Feminine ] ].

dist_pl_det-determiner-lex := dist_determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM non-Singular ].

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

adverb-lex := basic-adverb-lex & intersective-mod-lex & norm-zero-arg &
 [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD verb,
   	    	    	  	       LOCAL.CAT.VAL.SUBJ cons,
				       LOCAL.CAT.VAL.COMPS < > ]>,
   	    	    	  VAL [ SPR < >,
			        SUBJ < >,
				COMPS < >,
				SPEC < > ]]]]].

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD +vjp,
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD +vjp,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

clause-complementizer-lex-item := complementizer-lex-item &
 [ SYNSEM.LOCAL.CAT [HEAD.HEAD-INIT +, MC -], 
   ARG-ST < [LOCAL.CAT.MC -] > ].

;wa-comp-lex-item := complementizer-lex-item &
;[ SYNSEM.LOCAL.CAT [HEAD.HEAD-INIT +, MC +],
 ; ARG-ST < [LOCAL.CAT.MC +] > ].

decl-comp-lex-item := clause-complementizer-lex-item &
[ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop].

interr-comp-lex-item := clause-complementizer-lex-item &
[ SYNSEM.LOCAL [CONT.HOOK.INDEX.SF ques,
		CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.WH-QUES na-or--]].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
		   CAT [HEAD.HEAD-INIT -, 
			VAL.COMPS.FIRST [LOCAL.CAT.HEAD [FORM finite, WH-QUES na-or--],
					 NON-LOCAL.QUE <! !>]]]].



;;; Prepositions

prep-lex-item := basic-int-mod-adposition-lex & norm-zero-arg &
 [ SYNSEM [LOCAL [CAT [HEAD.MOD < [LOCAL intersective-mod & [CAT [HEAD +nv, VAL [SPR cons, COMPS <>]]]] >, 
		       VAL [ SPR < >, 
			     SUBJ < [LOCAL [CAT [HEAD noun, VAL [COMPS < >, SPR < > ]],
									   CONT.HOOK.INDEX #ind]]  >, 
			     COMPS < [LOCAL.CAT [HEAD noun, VAL [COMPS <>, SPR <>]]] >, 
			     SPEC < > ] ], 
		  CONT.HOOK.XARG #ind],
	   LKEYS.KEYREL.ARG1 #ind],
   INFLECTED [PREP_PRED_RULE -, PREP_OBJECT -]].

;prep-lex-item := basic-int-mod-adposition-lex &
 ;[ SYNSEM.LOCAL.CAT [HEAD.MOD <[LOCAL intersective-mod & [CAT [HEAD +nv, VAL.SPR null]]]>,
;		     VAL [SPR < >,
;			  COMPS < [OPT -, LOCAL.CAT [HEAD noun, VAL [COMPS < >, SPR < > ]]] >,
;			  SPEC < > ]],
 ;  INFLECTED.PREP_RULE -].

; [ SYNSEM [LOCAL [CAT [HEAD.MOD < [LOCAL intersective-mod & [CAT [HEAD +nv, VAL [SPR null, SUBJ cons]]]] >, 
;		       VAL [ SPR < >, 
;			     SUBJ < [LOCAL [CAT [HEAD noun, VAL [COMPS < >, SPR < > ]], 
;					    CONT.HOOK.INDEX #ind]]  >, 
;			     COMPS < [OPT -, LOCAL.CAT [HEAD noun, VAL [COMPS < >, SPR < > ]]] >, 
;			     SPEC < > ] ], 
;		  CONT.HOOK.XARG #ind],
;	   LKEYS.KEYREL.ARG1 #ind],


;prep-lex-rule-super := same-local-lex-rule & same-modified-lex-rule & same-light-lex-rule & no-ccont-lex-rule &
 ;[INFLECTED.PREP_RULE +,
  ;DTR prep-lex-item].

;attr-prep-lex-rule := const-lex-rule & prep-lex-rule-super &
 ;[ SYNSEM [ LOCAL [CAT [HEAD.MOD < [ LOCAL intersective-mod &
;					 [ CAT [HEAD +nv, VAL.SPR null],
;					   CONT.HOOK.INDEX #ind ]] >],
;		   CONT.HOOK.XARG #ind],
;	    LKEYS.KEYREL.ARG1 #ind ]].


pred-prep-lex-rule := const-lex-rule & same-local-lex-rule & same-modified-lex-rule & same-light-lex-rule & no-ccont-lex-rule &
  [ INFLECTED [PREP_PRED_RULE +, PREP_OBJECT #po],
    SYNSEM [LOCAL [CAT.VAL.SUBJ < [NON-LOCAL.QUE [LIST #first, LAST #middle]]>,
			       CONT.HOOK.INDEX.E.ASPECT Imperfective],
	      NON-LOCAL.QUE [LIST #first, LAST #last]],
    DTR prep_object_marker-lex-rule-super & [SYNSEM.NON-LOCAL.QUE [LIST #middle, LAST #last],
			 INFLECTED.PREP_OBJECT #po]].



;;; Wh-Questions

wh-pronoun-noun-lex := norm-hook-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ] ],
		     CONT [ RELS <! [ LBL #larg,
				       ARG0 #ind & ref-ind ],
				  [ PRED "wh_q_rel",
				    ARG0 #ind,
				    RSTR #harg ] !>,
			    HCONS <! [ HARG #harg,
				        LARG #larg ] !> ] ,
		     CONT.HOOK.INDEX.PNG.PER 3rd],
	     NON-LOCAL.QUE <! #ind !> ]].

wh-masc-sing-pron-lex := wh-pronoun-noun-lex &
[ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND Masculine, NUM Singular] ].

wh-fem-sing-pron-lex := wh-pronoun-noun-lex &
[ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND Feminine, NUM Singular] ].

wh-pl-pron-lex := wh-pronoun-noun-lex &
[ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Plural ].

wh-int-cl := clause & head-compositional & head-only &
  [ SYNSEM [ LOCAL.CAT [ VAL #val,
			 MC bool,
			 HEAD.WH-QUES +],
	     NON-LOCAL non-local-none ],
    C-CONT [ RELS <! !>,
	     HCONS <! !>,
	     HOOK.INDEX.SF ques ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD +vjp & [ FORM finite ],
				  VAL #val & 
				    [ SUBJ < >,
				      COMPS < > ] ],
		      NON-LOCAL [ SLASH <! !>,
				  REL <! !>,
				  QUE <! ref-ind !> ] ] ].


;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

imperfect_subject_suf-rule-dtr := word-or-lexrule.
object_marker-rule-dtr := word-or-lexrule.
adj_def-rule-dtr := word-or-lexrule.
noun_def-rule-dtr := word-or-lexrule.

;;; Lexical rule types

common-noun-lex-rule-super := add-only-no-ccont-rule & noun_def-rule-dtr &
  [ INFLECTED [ COMMON-NOUN-FLAG +,
                CONT_ACTION-FLAG #cont_action,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		NOUN_DEF-FLAG #noun_def,
		ADJ_DEF-FLAG #adj_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
                LEX_OBJ_DROP_BANNED-FLAG #lex_drop ],
    DTR CommonNoun-noun-lex &
        [ INFLECTED [ CONT_ACTION-FLAG #cont_action,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      NOUN_DEF-FLAG #noun_def,
		      ADJ_DEF-FLAG #adj_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop ] ] ].

Dual-lex-rule := common-noun-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Dual ].

Singular-lex-rule := common-noun-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Singular ].

Plural-lex-rule := common-noun-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM Plural ].

noun_def-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ NOUN_DEF-FLAG +,
                ADJ_DEF-FLAG #adj_def,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
                COMMON-NOUN-FLAG #common-noun,
		CONT_ACTION-FLAG #cont_action,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop ],
    DTR noun_def-rule-dtr &
        [ INFLECTED [ ADJ_DEF-FLAG #adj_def,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
                      COMMON-NOUN-FLAG #common-noun,
		      CONT_ACTION-FLAG #cont_action,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

def_noun-lex-rule := infl-lex-rule & noun_def-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act ].

indef_noun-lex-rule := const-lex-rule & noun_def-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.COG-ST type-id ].

perfect_subject-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & object_marker-rule-dtr &
  [ INFLECTED [ PERFECT_SUBJECT-FLAG +,
                COMMON-NOUN-FLAG #common-noun,
                CONT_ACTION-FLAG #cont_action,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ],
    DTR Perfective-verb-lex &
        [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      CONT_ACTION-FLAG #cont_action,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

perfective_1sg_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM Singular ] ].

perfective_2sg_m_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM Singular,
                                                                GEND Masculine ] ].

perfective_2sg_f_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM Singular,
                                                                GEND Feminine ] ].

perfective_3sg_m_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM Singular,
                                                                GEND Masculine ] ].

perfective_3sg_f_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM Singular,
                                                                GEND Feminine ] ].

perfective_1pl_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM Plural ] ].

perfective_2pl_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM Plural ] ].

perfective_3pl_subject-lex-rule := perfect_subject-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM non-Singular ] ].

 object_marker-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                CONT_ACTION-FLAG #cont_action,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def],
    DTR object_marker-rule-dtr &
        [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      CONT_ACTION-FLAG #cont_action,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,                
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def ] ] ].

overt_suf_obj_drop-lex-rule := infl-lex-rule & object_marker-lex-rule-super &
 [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [OPT +, OPT-CS in-foc]].

drop_1sg_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 1st ]]].

drop_2sg_m_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 2nd,
                                                                   GEND Masculine ]] ].

drop_2sg_f_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 2nd,
                                                                   GEND Feminine ]] ].

drop_3sg_m_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 3rd,
                                                                   GEND Masculine ]] ].

drop_3sg_f_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   GEND Feminine,
                                                                   PER 3rd ]] ].

drop_1pl_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 1st ]] ].

drop_2pl_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 2nd ]] ].

drop_3pl_object-lex-rule := overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 3rd ]]].
				      
object_marker-lex-drop := const-lex-rule & object_marker-lex-rule-super &
 [INFLECTED.LEX_OBJ_DROP_BANNED-FLAG +,
  DTR.INFLECTED.LEX_OBJ_DROP_BANNED-FLAG -,
  SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT-CS type-id].

object_marker-no-lex-drop-lex-rule := const-lex-rule & object_marker-lex-rule-super &
 [INFLECTED.LEX_OBJ_DROP_ALLOWED-FLAG +,
  DTR.INFLECTED.LEX_OBJ_DROP_ALLOWED-FLAG -, 
  SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [OPT -]].

imperfect_subject_pre-lex-rule-super := add-only-no-ccont-rule & imperfect_subject_suf-rule-dtr & infl-lex-rule & object_marker-rule-dtr &
  [ INFLECTED [ IMPERFECT_SUBJECT_PRE-FLAG +,
                COMMON-NOUN-FLAG #common-noun,
                CONT_ACTION-FLAG #cont_action,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ],
    DTR Imperfective-verb-lex &
        [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      CONT_ACTION-FLAG #cont_action,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

1st_subject-lex-rule := imperfect_subject_pre-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2nd_subject-lex-rule := imperfect_subject_pre-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

3rd_s_m_subject-lex-rule := imperfect_subject_pre-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                GEND Masculine,
                                                                NUM Singular ] ].

3rd_s_f_subject-lex-rule := imperfect_subject_pre-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                GEND Feminine,
                                                                NUM Singular ] ].

3rd_pl_subject-lex-rule := imperfect_subject_pre-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM non-Singular ] ].

imperfect_subject_suf-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & object_marker-rule-dtr &
  [ INFLECTED [ IMPERFECT_SUBJECT_SUF-FLAG +,
                COMMON-NOUN-FLAG #common-noun,
                CONT_ACTION-FLAG #cont_action,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ],
    DTR imperfect_subject_suf-rule-dtr &
        [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      CONT_ACTION-FLAG #cont_action,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

sing_non2_subject-lex-rule := imperfect_subject_suf-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                PER non-2nd ] ].

pl_subject-lex-rule := imperfect_subject_suf-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM non-Singular ].

2nd_sing_f_subject-lex-rule := imperfect_subject_suf-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Feminine,
                                                                PER 2nd ] ].

2nd_sing_m_subject-lex-rule := imperfect_subject_suf-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM Singular,
                                                                GEND Masculine ] ].

cont_action-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ CONT_ACTION-FLAG +,
                COMMON-NOUN-FLAG #common-noun,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                GEND_NUM_AGREE-FLAG #gend_num_agree,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ],
    DTR Continuous-aux-lex &
        [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      GEND_NUM_AGREE-FLAG #gend_num_agree,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

sing_fem_subj-lex-rule := cont_action-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Feminine ] ].

sing_masc_subj-lex-rule := cont_action-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                GEND Masculine ] ].

pl_subj-lex-rule := cont_action-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM non-Singular ].


n-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM [LOCAL [ CAT [ HEAD verb,
                         VAL [ COMPS < >, SPR < >, SPEC < >,
                               SUBJ < [ OPT -,
                                        LOCAL [ CONT.HOOK.INDEX #arg1,
                                                CAT [ HEAD noun,
                                                      VAL.SPR < > ]],
					NON-LOCAL.QUE [LIST #first, LAST #middle]] >]]],
	    NON-LOCAL.QUE [LIST #first, LAST #last]],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index & [E.ASPECT Imperfective],
                    XARG #arg1 ],
             RELS <! arg12-ev-relation &
                   [ PRED "_be_v_id_rel",
                     LBL #ltop,
                     ARG0 #index,
                     ARG1 #arg1,
                     ARG2 #arg2 ] !> ],
    ARGS < [ SYNSEM [LOCAL [ COORD -,
			    CAT [ HEAD noun,
                                  VAL.SPR < > ],
                            CONT.HOOK.INDEX #arg2],
		     NON-LOCAL.QUE [LIST #middle, LAST #last]]] >].
                   


gend_num_agree-adj-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ GEND_NUM_AGREE-FLAG +,
                COMMON-NOUN-FLAG #common-noun,
                CONT_ACTION-FLAG #cont_action,
                IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                PERFECT_SUBJECT-FLAG #perfect_subject,
		ADJ_DEF-FLAG #adj_def,
		NOUN_DEF-FLAG #noun_def,
		LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ],
    DTR [ INFLECTED [ COMMON-NOUN-FLAG #common-noun,
                      CONT_ACTION-FLAG #cont_action,
                      IMPERFECT_SUBJECT_SUF-FLAG #imperfect_subject_suf,
                      IMPERFECT_SUBJECT_PRE-FLAG #imperfect_subject_pre,
                      PERFECT_SUBJECT-FLAG #perfect_subject,
		      ADJ_DEF-FLAG #adj_def,
		      NOUN_DEF-FLAG #noun_def,
		      LEX_OBJ_DROP_ALLOWED-FLAG #no_suf,
		      LEX_OBJ_DROP_BANNED-FLAG #lex_drop  ] ] ].

adj-lex-rule-super := gend_num_agree-adj-lex-rule-super &
  [ DTR adj-lex ].

masc_sg_adj-lex-rule := adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ GEND Masculine,
                                      NUM Singular ] ].

fem_sg_adj-lex-rule := adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ GEND Feminine,
                                      NUM Singular ] ].

pl_adj-lex-rule := adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.NUM non-Singular ].

pres_part-adj-lex-rule-super := gend_num_agree-adj-lex-rule-super &
  [ DTR pres_participle-adj-lex ].

masc_sg_presp-lex-rule := pres_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ NUM Singular,
                                      GEND Masculine ] ].

fem_sg_presp-lex-rule := pres_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ NUM Singular,
                                      GEND Feminine ] ].

pl_presp-lex-rule := pres_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.NUM non-Singular ].

past_part-adj-lex-rule-super := gend_num_agree-adj-lex-rule-super &
  [ DTR past_participle-adj-lex ].

masc_sg_pastp-lex-rule := past_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ NUM Singular,
                                      GEND Masculine ] ].
fem_sg_pastp-lex-rule := past_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ NUM Singular,
                                      GEND Feminine ] ].

pl_pastp-lex-rule := past_part-adj-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.NUM non-Singular ].



adj_def-lex-rule-super := same-local-lex-rule & same-modified-lex-rule & same-light-lex-rule & no-ccont-lex-rule &
  [ INFLECTED [ ADJ_DEF-FLAG +,
                GEND_NUM_AGREE-FLAG #gend_num_agree],
    DTR gend_num_agree-adj-lex-rule-super & [INFLECTED.GEND_NUM_AGREE-FLAG #gend_num_agree] ].


attr-adj-lex-rule := adj_def-lex-rule-super & same-non-local-lex-rule &
 [ SYNSEM [ LOCAL [CAT [HEAD.MOD < [ LOCAL intersective-mod &
					 [ CAT [HEAD noun, VAL.SPR cons],
					   CONT.HOOK.INDEX #ind ]] >,
		       VAL.SUBJ < >],
		   CONT [HCONS <! !>, HOOK.XARG #ind]],
	    LKEYS.KEYREL.ARG1 #ind ]].

def_adj-lex-rule := infl-lex-rule & attr-adj-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.COG-ST uniq+fam+act].

indef_adj-lex-rule := const-lex-rule & attr-adj-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.COG-ST type-id].

;indef_coord_adj-lex-rule := constant-lex-rule & attr-adj-lex-rule &
;  [ SYNSEM.LOCAL.COORD +].

pred_adj-lex-rule := const-lex-rule & adj_def-lex-rule-super &
  [ SYNSEM [LOCAL [ CAT [VAL [SUBJ < [ OPT -, 
									LOCAL [ CONT.HOOK.INDEX #ind,
											CAT [ VAL [ SPR < >,
														COMPS < > ],
												  HEAD noun ] ],
									NON-LOCAL.QUE [LIST #first, LAST #middle]]  >,
								SPR < [LOCAL.CONT.HOOK.XARG.E.ASPECT Imperfective] >],
						HEAD.MOD <>],
		    CONT.HOOK.XARG #ind],
	    NON-LOCAL.QUE [LIST #first, LAST #last],
	    LKEYS.KEYREL.ARG1 #ind ],
    DTR.SYNSEM.NON-LOCAL [QUE [LIST #middle, LAST #last]]].


 ;  NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
 ;            REL 0-dlist ] ]].


prep_object_marker-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ PREP_OBJECT +,
		PREP_PRED_RULE #pp ],
    DTR prep-lex-item &
        [ INFLECTED.PREP_PRED_RULE #pp ]].

prep_overt_suf_obj_drop-lex-rule := infl-lex-rule & prep_object_marker-lex-rule-super &
 [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [OPT +, OPT-CS activ-or-more]].

prep_1sg_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 1st ]]].

prep_2sg_m_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 2nd,
                                                                   GEND Masculine ]] ].

prep_2sg_f_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 2nd,
                                                                   GEND Feminine ]] ].

prep_3sg_m_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   PER 3rd,
                                                                   GEND Masculine ]] ].

prep_3sg_f_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Singular,
                                                                   GEND Feminine,
                                                                   PER 3rd ]] ].

prep_1pl_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 1st ]] ].

prep_2pl_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 2nd ]] ].

prep_3pl_object-lex-rule := prep_overt_suf_obj_drop-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CONT.HOOK.INDEX.PNG [ NUM Plural,
                                                                   PER 3rd ]]].
				      
;prep_no_suf-lex-rule := const-lex-rule & prep_object_marker-lex-rule-super &
 ;[SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT-CS type-id].

prep_no_suf-lex-rule := const-lex-rule & prep_object_marker-lex-rule-super &
 [SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [OPT -]].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; The head of head-comp-phrase can't be: ['comp']

; just block walla

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
 [HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.HEAD-INIT na-or-+].

subj-head-phrase := shu-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < >].

shu-head-subj-phrase := head-valence-phrase & head-compositional & 
              basic-binary-headed-phrase &
  [ SYNSEM phr-synsem & 
	   [ LOCAL [CAT [ POSTHEAD +,
			  HC-LIGHT -,
			  VAL [ SUBJ < >,
				COMPS #comps,
				SPR #spr ] ],
		    CONT.HOOK.INDEX.SF prop-or-ques]],
    C-CONT [ RELS <! !>,
	     HCONS <! !>,
	     ICONS <! !> ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < #synsem >,
                    COMPS #comps,    
                    SPR #spr ],
    NON-HEAD-DTR.SYNSEM #synsem & canonical-synsem &
	   [ LOCAL [ CAT [ VAL [ SUBJ olist,
				 COMPS olist,
				 SPR olist ] ] ],
	     NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
		     REL 0-dlist ] ]].

shu-head-opt-subj-phrase := basic-head-opt-subj-phrase & head-compositional &
[ SYNSEM [LOCAL.CONT.HOOK.INDEX.SF prop-or-ques,
	  NON-LOCAL.REL 0-dlist],
  HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK [ INDEX #index,
				      ICONS-KEY.IARG1 #index,
				      CLAUSE-KEY #index ],
		    NON-LOCAL.REL 0-dlist],
    C-CONT [ RELS <! !>,
	     HCONS <! !>] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase & head-valence-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !>,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR.FIRST unexpressed ].

; comp-head-phrase requires things that are [ HEAD comp ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.HEAD comp,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.HEAD-INIT -].

head-adj-int-phrase :+
 [NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS <>].


;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

topormid-coord-phrase :+ [ SYNSEM.NON-LOCAL.QUE [LIST #first, LAST #last],
   LCOORD-DTR.SYNSEM.NON-LOCAL.QUE [LIST #first, LAST #middle],
   RCOORD-DTR.SYNSEM.NON-LOCAL.QUE [LIST #middle, LAST #last ]].
			  
bottom-coord-phrase :+ [ SYNSEM.NON-LOCAL #nl,
   NONCONJ-DTR.SYNSEM.NON-LOCAL #nl ].
   
;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL [COORD-STRAT "1",
		  CONT.HOOK.INDEX.PNG [PER #per, NUM Plural]],
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER #per].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL [COORD-STRAT "1",
		  CONT.HOOK.INDEX.SF prop-or-ques]].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

frag-sent-conj-rule := unary-phrase & nocoord & head-valence-phrase &
  [ SYNSEM [LOCAL [ CAT [ HEAD verb,
                          VAL [ COMPS < >, SPR < >, SPEC < >, SUBJ < >]],
		    CONT.HOOK.INDEX [SF prop-or-ques, E #tam]],
	    NON-LOCAL.QUE #que],
    C-CONT [ HOOK [LTOP #lbl, INDEX #carg],
	     RELS <! !>,
	     HCONS <! !>],
    ARGS < s1-bottom-coord-rule & [ SYNSEM [LOCAL [ CONT.HOOK [INDEX #rind, LTOP #rhndl],
						    COORD-REL [ LBL #lbl, 
								C-ARG #carg, 
								R-HNDL #rhndl, 
								R-INDEX #rind & [E #tam]]],
					    NON-LOCAL.QUE #que]]>].

a1-top-coord-rule := basic-adj-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

a1-mid-coord-rule := basic-adj-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

a1-bottom-coord-rule := conj-first-bottom-coord-rule & adj-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].



