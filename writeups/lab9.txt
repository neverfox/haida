# Lab 9

### University of Washington, LING 567, Winter 2016

#### Author: Roman Pearah
#### Partner: Kristen Piepgrass

#### Language: Haida (Masset dialect)

---

## Changes to Grammar

### Normalization

There were a couple of aspects of our grammar that simply needed to be normalized to be compatible with the MMT grammars. So we:

* Changed all instances of `_pron_n_rel` to `pron_rel`
* Changed all instances of `neg_a_rel` to `neg_rel`

### Lexicon

Next, we had to add to our lexicon all words from the MMT sentences that were not already accounted for:

```
duuj := alienable-noun-lex &
  [ STEM < "duuj" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cat_n_rel" ].

q’wiid_1 := itr-nom-verb-lex &
  [ STEM < "q’wiid" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hungry_a_rel" ].

q’wiid_2 := attrib-adj-lex &
  [ STEM < "q’wiid" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hungry_a_rel" ].

7unsiid := prop-sent-verb-lex &
  [ STEM < "7unsiid" >,
    SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].

cangala := int-adverb-lex &
  [ STEM < "cangala" >,
    SYNSEM.LKEYS.KEYREL.PRED "_quickly_a_rel" ].
```

We also found that our 2sg acc pronoun was listed as plural and corrected it.

### Topic Change

Also, because our topic change lexical rule lacked semantic content and we could not locate a sufficient explanation to help us add any, we commented it out for the purposes of MT.

### Features

In our first pass through the translation process, we found that we were seeing our negative suffix attach throughout where it shouldn't. This was caused by a failure to unify `NEG-SAT` values of the mother and head daughter in several clause and phrase definitions, which we corrected:

```
int-clause := head-only & interrogative-clause &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb,
                         INT -,
                         VAL #val ],
             NON-LOCAL.YNQ <! !>,
             NEG-SAT #negsat ],
    HEAD-DTR.SYNSEM [ NEG-SAT #negsat,
                      LOCAL.CAT [ INT +,
                                  VAL #val ],
                      NON-LOCAL [ YNQ <! *top* !>,
                                  SLASH <! !> ]]].

wh-ques-phrase := basic-head-filler-phrase & interrogative-clause & head-final &
   [ SYNSEM [ LOCAL.CAT [ MC +,
                          VAL #val,
                          HEAD verb & [ FORM finite ] ],
              NEG-SAT #negsat ],
     HEAD-DTR.SYNSEM [ LOCAL.CAT [ MC na,
                                   INT +,
                                   VAL #val & [ SUBJ < >,
                                                COMPS < > ] ],
                       NEG-SAT #negsat ],
     NON-HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD.WH-EMB -,
                                       MKG.FC + ],
                           NON-LOCAL.QUE < ! ref-ind ! > ] ].

extracted-comp-phrase := basic-extracted-comp-phrase & same-ynq-unary-phrase & same-int-phrase & same-mc-phrase & same-nf-phrase &
  [ SYNSEM [ LOCAL.CAT.HEAD verb,
             NEG-SAT #negsat ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT.VAL.SUBJ cons,
                      NEG-SAT #negsat ] ].

extracted-subj-phrase := basic-extracted-subj-phrase & same-ynq-unary-phrase & same-int-phrase & same-mc-phrase & same-nf-phrase &
  [ C-CONT [ RELS <! !>,
       HCONS <! !>,
       ICONS <! !> ],
    SYNSEM [ LOCAL.CAT.HEAD verb,
             NEG-SAT #negsat ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT.VAL.COMPS olist,
                      NEG-SAT #negsat ] ].

context1-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase & same-mc-phrase & same-nf-phrase & same-int-phrase & same-periph-unary-phrase & same-ynq-unary-phrase &
[ SYNSEM.NEG-SAT #negsat,
  HEAD-DTR.SYNSEM [ NEG-SAT #negsat,
  LIGHT +,
  LOCAL.CAT.VAL [SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ POTENCY low,
              PERNUM 3rd ],
     COMPS high-pot-list ] ]].

context1-head-opt-comp-phrase := basic-head-opt-comp-phrase & same-mc-phrase & same-nf-phrase & same-int-phrase & same-periph-unary-phrase & same-ynq-unary-phrase  &
[ SYNSEM [ LIGHT -,
     NEG-SAT #negsat ],
  HEAD-DTR.SYNSEM[ NEG-SAT #negsat,
       LOCAL.CAT.VAL [SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG.POTENCY high ] >,
          COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [POTENCY low,
                   PERNUM 3rd]]]].

head-adj-int-phrase :+ same-int-phrase & same-mc-phrase & same-nf-phrase &
 [ SYNSEM [ NEG-SAT #negsat,
            OPT-CS #opt-cs ],
   NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < [ L-PERIPH #periph ]>,
   HEAD-DTR.SYNSEM [ OPT-CS #opt-cs,
                     NEG-SAT #negsat,
                     L-PERIPH #periph ]].

adj-head-int-phrase :+ same-int-phrase & same-mc-phrase & same-nf-phrase &
  [ SYNSEM [ NEG-SAT #negsat ],
    HEAD-DTR.SYNSEM [ NEG-SAT #negsat ]].
```

Furthermore, when attempting to translate `Dogs eat quickly`, we noticed that the `head-adj-int` rule was dropping `INT` and `MC` features, leading to incorrect inflection. We solved this by adding `same-int-phrase` to `head-adj-int` (and `adj-head-int`) and by creating a `same-mc-type` to add as well:

```
same-mc-phrase := headed-phrase &
  [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].
```

We were also getting “spinning” in our embedded clauses from a failure to pass up our `NF` (non-factive) feature, so we created a rule for this identity:

```
same-nf-phrase := headed-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD.NF #nf,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.NF #nf ].
```

We added these three identities as supertypes where seen above as well as the following:

```
comp-head-phrase := basic-head-1st-comp-phrase & head-final & same-int-phrase & same-mc-phrase & same-nf-phrase.

subj-head-phrase := decl-head-subj-phrase & same-int-phrase & head-final & same-mc-phrase & same-nf-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VC + ].

neg-adj-head-scop-phrase := adj-head-scop-phrase & same-int-phrase & same-mc-phrase & same-nf-phrase &
  [ SYNSEM.NEG-SAT +,
    HEAD-DTR.SYNSEM.NEG-SAT -,
    NON-HEAD-DTR neg-adv-lex ].

scopal-adj-head-phrase := adj-head-scop-phrase & same-int-phrase & same-mc-phrase & same-nf-phrase &
  [ HEAD-DTR.SYNSEM.NEG-SAT +,
    NON-HEAD-DTR scop-sent-adv-lex ].
```

We also had three embedding verbs of type `prop-sent-verb-lex`, which treated all three as having non-factive complements, when “know” actually takes a factive complement:

```
prop-sent-verb-lex := sentential-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CONT.HOOK.INDEX.SF prop,
                                           CAT [ HEAD.NF +,
                                                 MC - ] ] ] > ].

7unsiid := prop-sent-verb-lex &
  [ STEM < "7unsiid" >,
    SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].

suu_2 := prop-sent-verb-lex &
  [ STEM < "suu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel" ].

gudang_2 := prop-sent-verb-lex &
  [ STEM < "gudang" >,
    SYNSEM.LKEYS.KEYREL.PRED "_think_v_rel" ].
```

So we split the type up accordingly and changed the type of *suu* and *gudang*, also being sure to set `INF -` and `INT -`:

```
prop-sent-verb-lex := sentential-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CONT.HOOK.INDEX.SF prop,
                                           CAT [ HEAD [ NF -,
                                                        INF - ],
                                                 MC -,
                                                 INT - ] ] ] > ].

prop-non-fac-sent-verb-lex := sentential-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CONT.HOOK.INDEX.SF prop,
                                           CAT [ HEAD [ NF +,
                                                        INF - ],
                                                 MC - ,
                                                 INT - ] ] ] > ].

7unsiid := prop-sent-verb-lex &
  [ STEM < "7unsiid" >,
    SYNSEM.LKEYS.KEYREL.PRED "_know_v_rel" ].

suu_2 := prop-non-fac-sent-verb-lex &
  [ STEM < "suu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel" ].

gudang_2 := prop-non-fac-sent-verb-lex &
  [ STEM < "gudang" >,
    SYNSEM.LKEYS.KEYREL.PRED "_think_v_rel" ].                                    
```

### Coordination

To reduce overgeneration in clausal coordination sentences, we added mother-daughter identities for `INT`, `MC`, `INF` and `NEG-SAT` features to our VP/S coordination rules:

```
vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM [ LOCAL [ COORD-STRAT "3",
         CAT [ INT #int,
         MC #mc,
         HEAD.INF #inf ]],
       NEG-SAT #negsat],
    LCOORD-DTR.SYNSEM [ LOCAL.CAT [ INT #int,
            MC #mc,
            HEAD.INF #inf ],
      NEG-SAT #negsat],
    RCOORD-DTR.SYNSEM [ LOCAL.CAT [ INT #int,
            MC #mc,
            HEAD.INF #inf ],
      NEG-SAT #negsat ]].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
    [ SYNSEM [ LOCAL [ COORD-STRAT "3",
           CAT [ INT #int,
           MC #mc,
           HEAD.INF #inf ]],
       NEG-SAT #negsat],
    NONCONJ-DTR.SYNSEM [ LOCAL [ COORD-STRAT "3",
         CAT [ INT #int,
               MC #mc,
               HEAD.INF #inf ]],
       NEG-SAT #negsat]].

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM [ LOCAL [ COORD-STRAT "3",
         CAT [ INT #int,
         MC #mc,
         HEAD.INF #inf ]],
       NEG-SAT #negsat],
    LCOORD-DTR.SYNSEM [ LOCAL.CAT [ INT #int,
            MC #mc,
            HEAD.INF #inf ],
      NEG-SAT #negsat],
    RCOORD-DTR.SYNSEM [ LOCAL.CAT [ INT #int,
            MC #mc,
            HEAD.INF #inf ],
      NEG-SAT #negsat ]].

s3-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
    [ SYNSEM [ LOCAL [ COORD-STRAT "3",
           CAT [ INT #int,
           MC #mc,
           HEAD.INF #inf ]],
       NEG-SAT #negsat],
    NONCONJ-DTR.SYNSEM [ LOCAL [ COORD-STRAT "3",
         CAT [ INT #int,
               MC #mc,
               HEAD.INF #inf ]],
       NEG-SAT #negsat]].
```

### Definiteness

We also had to find a way to eliminate translations of attributive adjective and possessive sentences where the modified or possessed noun lacked the Haida -DEF suffix. For this, we needed to identify `OPT-CS` between mother and head daughter on `head-adj-int-phrase` (attribute adjectives) and `adj-head-int-phrase` (possessives), both see above.

### Question Clitic

We had to constrain the modifier of our question clitic to `HEAD noun` because ???:

```
question-clitic-lex := no-hcons-lex-item &
 [ SYNSEM [ LOCAL [ CAT [ POSTHEAD + ,
      VAL [ SPR < >,
            COMPS < >,
            SUBJ < >,
            SPEC < > ],
      HEAD adv & [ MOD < [ LIGHT +,
               L-PERIPH +,
               LOCAL.CAT [ HEAD noun,
         VAL.SPR < > ]] > ]],
        CONT.RELS <! !> ],
      NON-LOCAL.YNQ <! *top* !>]].
```

### Variable Property Mapping

Because Chadian Arabic doesn't export any tense during translation, relying instead on aspect, we were getting both past and present tense generation, when we should only see present. To stop this, we set a default present tense for Haida:

```
E.TENSE : TENSE
  present <> present
  nonpast <> nonpast
  past <> past
  * >> present
  present << [e]
```

We also removed the GEND section, as recommended.

## Transfer Rules

We instantiated the provided `pro-drop` transfer rule for both English and Chadian Arabic because Haida is a pro-drop language.

For Chadian Arabic, we also instantiated both the `pro-insert-arg1-mtr` and `pro-insert-arg2-mtr` transfer rules because ???.

For English, we created a new transfer rule for ‘eat’ because ???:

```
eat-intrans-mtr := monotonic_omtr &
[ INPUT [ RELS <! [ PRED "_eat_v_rel",
                    LBL #lbl,
                    ARG0 #arg0,
                    ARG1 #arg1,
                    ARG2 #arg2 & [ COG-ST type-id ] ] !> ],
  FILTER [ RELS <! [ ARG0 #arg2 ] !> ],
  OUTPUT [ RELS <! [ PRED "_eat_v_rel",
                     LBL #lbl,
                     ARG0 #arg0,
                     ARG1 #arg1 ] !> ]].
```

## Coverage

Valid sources of multiple translations include:

* SOV vs. OSV word order
* No marking of subject or object for number (`plural-obj-suffix` or `plural-subj-suffix`)
* rahl and 7isgyaan coordination are interchangeable
* Multiple ways of expressing 1sg alienable possession
* Combinatoric explosion of the above in coordination

### English
#### 19 of 24 coverage

##### Successes

```
; 1 generation result
Dogs sleep.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
Dogs chase cars.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
I chase you.

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
Dogs eat.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
The dogs chase cars.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
The dogs dont chase cars.

; 192 generation results
; TODO: justify this number with a breakdown
I think that you know that dogs chase cars.

; 8 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix` x 2 rahl vs 7isgyaan coordination
Cats and dogs chase cars.

; 16 generation results 
; 4^2: 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix` ^ 2 clauses
Dogs chase cars and cats chase dogs.

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
Cats chase dogs and sleep.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
Do cats chase dogs?

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
Hungry dogs eat.

; 6 generation results
; 2 `plural-obj-suffix` or `plural-subj-suffix` x 3 from adverb on the V, VP and S
Dogs eat quickly.

; 1 generation result
The dogs are hungry.

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
The dogs are the cats.

; 1 generation result
Who sleeps?

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
What do the dogs chase?

; 1 generation result
The dog's car sleeps.

; 4 generation results
; Multiple ways of expressing 1sg alienable possession
My dogs sleep.
```

##### Failures

```
; 672 generation results
I ask whether you know that dogs chase cars.

; We were not able to locate a word for `park` or `in.the.park`
; However, even if we had, we did not implement this phenomena
; as the way it is expressed in Haida was out-of-scope
The dogs are in the park.

; 72 generation results
What do you think the dogs chase?

; 16 generation results
Who asked what the dogs chase?

; 56 generations results
I asked what the dogs chased.
```

### Chadian Arabic
#### 16 of 22 coverage

##### Successes

```
; 1 generation result
kalib-PL y-unuum-u

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
kalib-PL y-itaarid-u watiir-PL

; 2 generation results
; SOV/OSV word order
ana n-itaarid-0-k

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
kalib-PL y-aakul-u

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
al-kalib-PL y-itaarid-u watiir-PL

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
al-kalib-PL ma y-itaarid-u watiir-PL

; 8 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix` x 2 rahl vs 7isgyaan coordination
biss-PL wa kalib-PL y-itaarid-u watiir-PL

; 16 generation results 
; 4^2: 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix` ^ 2 clauses
kalib-PL y-itaarid-u watiir-PL wa biss-PL y-itaarid-u kalib-PL

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
biss-PL y-itaarid-u kalib-PL wa naam-o

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
biss-PL y-itaarid-u kalib-PL walla

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
kalib-PL jii'aan-PL y-aakul-u

; 6 generation results
; 2 `plural-obj-suffix` or `plural-subj-suffix` x 3 from adverb on the V, VP and S
kalib-PL y-aakul-u ajala

; 1 generation result
al-kalib-PL jii'aan-PL

; 4 generation results
; 2 from SOV/OSV word order x 2 `plural-obj-suffix` or `plural-subj-suffix`
al-kalib-PL al-biss-PL

; 1 generation result
yaatu y-unuum-0

; 2 generation results
; `plural-obj-suffix` or `plural-subj-suffix`
al-kalib-PL y-itaarid-u chunu
```

##### Failures

```
; 2304 generation results
ana n-ahsib-0 kadar inta t-a'arif-0 kadar kalib-PL y-itaarid-u watiir-PL

; 2688 generation results
ana n-as'al-0 kan inta t-a'arif-0 kadar kalib-PL y-itaarid-u watiir-PL

; We were not able to locate a word for `park` or `in.the.park`
; However, even if we had, we did not implement this phenomena
; as the way it is expressed in Haida was out-of-scope
al-kalib-PL fi al-naga'a

; 48 generation results
; problems from past and EVID
inta t-ahsib-0 kadar al-kalib-PL y-itaarid-u chunu

; 8 generation results
yaatu sa'al-0 al-kalib-PL y-itaarid-u chunu

; 80 generation results
ana sa'al-t al-kalib-PL taarad-o chunu
```
