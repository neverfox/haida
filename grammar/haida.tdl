;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Haida
;;; created at:
;;;     Fri Jan 29 23:35:50 UTC 2016
;;; based on Matrix customization system version of:
;;;     Sun Jan 10 22:56:48 UTC 2016
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ EVIDENTIAL bool,
    PERNUM pernum,
    POTENCY potency ].

noun :+ [ CASE case ].

head :+ [ AUX bool,
    PRD bool,
    NEGATED luk,
    FORM form ].

synsem :+ [ NEG-SAT luk ].

basic-verb-lex :+ [ SYNSEM.NEG-SAT na-or-+ ].

basic-head-comp-phrase :+ [ HEAD-DTR.SYNSEM [ NEG-SAT #ns,
                      LOCAL.CAT.MC #mc ],
    SYNSEM [ NEG-SAT #ns,
             LOCAL.CAT [ MC #mc,
                         VC #vc ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VC #vc ].

basic-head-subj-phrase :+ [ SYNSEM.NEG-SAT #ns,
    HEAD-DTR.SYNSEM.NEG-SAT #ns ].

clause :+ [ SYNSEM.NEG-SAT na-or-+ ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

inflected :+ [ FIN-FLAG luk,
    NUM-FLAG luk,
    TENSE-FLAG luk,
    FUT-FLAG luk,
    TRANSITIVE-VERB-FLAG luk,
    FINITE-FLAG luk ].

infl-satisfied :+ [ FIN-FLAG na-or-+,
    NUM-FLAG na-or-+,
    TENSE-FLAG na-or-+,
    FUT-FLAG na-or-+,
    TRANSITIVE-VERB-FLAG na-or-+,
    FINITE-FLAG na-or-+ ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; Introducing VC keeps track whether main-verb is present in cluster

cat :+ [ VC luk ].

lex-rule :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    DTR.SYNSEM.LOCAL.CAT.VC #vc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Pernum

pernum := *top*.
pl := pernum.
3rd := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1pl := 1st & pl.
1pl_incl := 1pl.
1pl_excl := 1pl.
2pl := 2nd & pl.
3pl := 3rd & pl.
non-3pl := pernum.
2nd := non-3pl.
1st := non-3pl.
sg := non-3pl.

;;; Potency

potency := *top*.
HIGH := potency.
LOW := potency.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

nonpast := tense.
present := nonpast.
past := tense.
rel-prs := present.

;;; Aspect

perfective := aspect.
imperfective := aspect.
progressive := imperfective.
frequentive := imperfective.
inceptive := aspect.

;;; Mood

future := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

cn-noun-lex := noun-lex.

nom-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

1sg-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1pl-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl ].

2sg-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

3p-hpot-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ POTENCY HIGH,
                                       PERNUM 3rd ] ].

1sg-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1pl-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl ].

2pl-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

3p-lpot-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.HOOK.INDEX.PNG [ POTENCY LOW,
                                         PERNUM 3rd ] ] ].

2sg-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

pn-noun-lex := no-spr-noun-lex.

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item & NUM-rule-dtr & aspect-rule-dtr & modal-2-rule-dtr & modal-3-or-tense-rule-dtr & negation-rule-dtr &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ],
    INFLECTED [ FIN-FLAG na-or--,
                NUM-FLAG -,
                TENSE-FLAG -,
                FINITE-FLAG - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VC +,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.AUX +,
                       VC - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    INFLECTED.TRANSITIVE-VERB-FLAG + ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

acc-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE acc ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

itr-acc-verb-lex := itr-verb-lex & acc-intransitive-verb-lex.

tr-verb-lex := transitive-verb-lex.

itr-verb-lex := verb-lex.

itr-nom-verb-lex := itr-verb-lex & nom-intransitive-verb-lex.

;;; Auxiliaries

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT [ HEAD verb,
                             VAL [ COMPS #vcomps,
                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] ] > ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

arg-comp-aux-with-pred := arg-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS <! qeq &
                                 [ HARG #harg,
                                   LARG #larg ] !>,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ ],
             [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

inceptive-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT inceptive,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun ] ] ] >,
                             COMPS < [ LOCAL.CAT [ HEAD.PRD +,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adj ].

copula-cop-lex := adj-comp-copula-verb-lex.

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

attrib-adj-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

dem-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM sg ].

dem-pl-determiner-lex := determiner-lex & no-icons-lex-item.

;;; Type for adverbs

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD verb ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ]]]]].

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD -,
                       HEAD [ NEGATED +,
                              MOD < [ LOCAL.CAT [ HEAD verb,
                                                  VAL [ SUBJ null,
                                                        COMPS null ] ] ] > ] ] ].

neg-adj-head-scop-phrase := adj-head-scop-phrase &
  [ SYNSEM.NEG-SAT +,
    HEAD-DTR.SYNSEM.NEG-SAT -,
    NON-HEAD-DTR neg-adv-lex ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

modal-3-or-tense-rule-dtr := word-or-lexrule.
modal-2-rule-dtr := word-or-lexrule.
NUM-rule-dtr := word-or-lexrule.
negation-rule-dtr := word-or-lexrule.
aspect-rule-dtr := word-or-lexrule.

;;; Lexical rule types

negation-lex-rule-super := NUM-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & modal-2-rule-dtr & modal-3-or-tense-rule-dtr &
  [ INFLECTED #infl,
    DTR negation-rule-dtr &
        [ INFLECTED #infl &
                    [ FIN-FLAG + ] ] ].

neg-lex-rule := negation-lex-rule-super &
  [ SYNSEM.NEG-SAT - ].

modal-2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & modal-3-or-tense-rule-dtr &
  [ INFLECTED [ TRANSITIVE-VERB-FLAG #transitive-verb,
                FIN-FLAG #fin,
                NUM-FLAG #num,
                TENSE-FLAG #tense,
                FINITE-FLAG #finite ],
    DTR modal-2-rule-dtr &
        [ INFLECTED [ TRANSITIVE-VERB-FLAG #transitive-verb,
                      FIN-FLAG #fin & +,
                      NUM-FLAG #num,
                      TENSE-FLAG #tense,
                      FINITE-FLAG #finite ] ] ].

fut-lex-rule := modal-2-lex-rule-super &
  [ INFLECTED.FUT-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD future ].

evid-lex-rule := modal-2-lex-rule-super &
  [ INFLECTED.FUT-FLAG #fut,
    DTR.INFLECTED.FUT-FLAG #fut ].

tense-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TENSE-FLAG +,
                TRANSITIVE-VERB-FLAG #transitive-verb,
                FUT-FLAG #fut,
                FIN-FLAG #fin,
                NUM-FLAG #num,
                FINITE-FLAG #finite ],
    DTR modal-3-or-tense-rule-dtr &
        [ INFLECTED [ TRANSITIVE-VERB-FLAG #transitive-verb,
                      FUT-FLAG #fut,
                      FIN-FLAG #fin & +,
                      NUM-FLAG #num,
                      FINITE-FLAG #finite ] ] ].

past-lex-rule := tense-lex-rule-super &
  [ DTR.INFLECTED.FUT-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

non-past-lex-rule := tense-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

present-lex-rule := non-past-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

rel-prs-lex-rule := non-past-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE rel-prs ].

aspect-lex-rule-super := NUM-rule-dtr & add-only-no-ccont-rule & infl-lex-rule & modal-2-rule-dtr & modal-3-or-tense-rule-dtr & negation-rule-dtr &
  [ INFLECTED #infl,
    DTR aspect-rule-dtr &
        [ INFLECTED #infl ] ].

perf-aspect-lex-rule := aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

imperf-aspect-lex-rule := aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

prog-aspect-lex-rule := imperf-aspect-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT progressive ].

freq-aspect-lex-rule := imperf-aspect-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT frequentive ].

NUM-lex-rule-super := add-only-no-ccont-rule & modal-2-rule-dtr & modal-3-or-tense-rule-dtr &
  [ INFLECTED [ NUM-FLAG +,
                TRANSITIVE-VERB-FLAG #transitive-verb,
                FUT-FLAG #fut,
                FIN-FLAG #fin,
                TENSE-FLAG #tense,
                FINITE-FLAG #finite ],
    DTR NUM-rule-dtr &
        [ INFLECTED [ TRANSITIVE-VERB-FLAG #transitive-verb,
                      FUT-FLAG #fut,
                      FIN-FLAG #fin & +,
                      TENSE-FLAG #tense,
                      FINITE-FLAG #finite ] ] ].

non-3pl-intrans-lex-rule := NUM-lex-rule-super & const-lex-rule &
  [ DTR.INFLECTED.TRANSITIVE-VERB-FLAG na,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-3pl ].

pl-subj-lex-rule := NUM-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

pl-obj-lex-rule := NUM-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

non-3pl-lex-rule := NUM-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-3pl,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-3pl ] ].

finite-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ FINITE-FLAG +,
                TRANSITIVE-VERB-FLAG #transitive-verb,
                FUT-FLAG #fut,
                NUM-FLAG #num,
                TENSE-FLAG #tense ],
    DTR verb-lex &
        [ INFLECTED [ TRANSITIVE-VERB-FLAG #transitive-verb,
                      FUT-FLAG #fut,
                      NUM-FLAG #num,
                      TENSE-FLAG #tense ] ] ].

fin-lex-rule := NUM-rule-dtr & aspect-rule-dtr & finite-lex-rule-super & modal-2-rule-dtr & modal-3-or-tense-rule-dtr & negation-rule-dtr &
  [ INFLECTED.FIN-FLAG +,
    SYNSEM.LOCAL.CAT.HEAD.FORM finite ].

non-fin-lex-rule := finite-lex-rule-super &
  [ INFLECTED.FIN-FLAG #fin,
    DTR.INFLECTED.FIN-FLAG #fin,
    SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ].

modal-3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR modal-3-or-tense-rule-dtr &
        [ INFLECTED #infl &
                    [ FIN-FLAG + ] ] ].

non-factive-lex-rule := modal-3-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

context1-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ POTENCY LOW,
                                                                         PERNUM 3rd ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VC + ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].
