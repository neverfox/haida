;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Haida
;;; created at:
;;;     Thu Jan 21 22:49:42 UTC 2016
;;; based on Matrix customization system version of:
;;;     Sun Jan 10 22:56:48 UTC 2016
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ NEGATED luk ].

inflected :+ [ PAST-FLAG luk,
    FUT-OR-PRS-FLAG luk ].

infl-satisfied :+ [ PAST-FLAG na-or-+,
    FUT-OR-PRS-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Tense

nonpast := tense.
present := nonpast.
future := nonpast.
past := tense.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

cn-noun-lex := noun-lex.

nom-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

1sg-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

1pl-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2sg-nom-pron-noun-lex := nom-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 2nd ] ].

3p-hpot-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

1sg-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

1pl-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

2pl-pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM pl ] ].

3p-lpot-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

2sg-acc-pron-noun-lex := acc-pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 2nd ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & future-rule-dtr & past-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED [ PAST-FLAG -,
                FUT-OR-PRS-FLAG na-or-- ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

acc-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE acc ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

itr-acc-verb-lex := acc-intransitive-verb-lex.

tr-nom-verb-lex := nom-acc-transitive-verb-lex.

tr-verb-lex := nom-acc-transitive-verb-lex.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

dem-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

dem-pl-determiner-lex := determiner-lex & no-icons-lex-item.

; Type for negative selected comps. 
;                 This type uses the MOD list to get scopal semantics.
;                 Constrain head-modifier rules to be [NEGATED -] if you don't
;                 want this type to act as a modifer.

neg-comp-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             SPEC < >,
                             COMPS < >,
                             SUBJ < > ],
                       HEAD [ NEGATED +,
                              MOD < [ LOCAL.CAT.HEAD verb ] > ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

future-rule-dtr := word-or-lexrule.
past-rule-dtr := word-or-lexrule.

;;; Lexical rule types

negation-lex-rule-super := future-rule-dtr & infl-lex-rule & past-rule-dtr & val-change-only-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

neg-lex-rule := negation-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR #spr,
                           SPEC #spec,
                           SUBJ #subj,
                           COMPS < canonical-synsem &
                                   [ LOCAL.CAT.HEAD [ NEGATED +,
                                                      MOD < [ LOCAL.CONT.HOOK #hook ] > ] ] . #oldcomps > ],
    DTR.SYNSEM.LOCAL [ CAT.VAL [ SPR #spr,
                                 SPEC #spec,
                                 SUBJ #subj,
                                 COMPS #oldcomps ],
                       CONT.HOOK #hook ] ].

future-lex-rule-super := add-only-no-ccont-rule & past-rule-dtr &
  [ INFLECTED #infl,
    DTR future-rule-dtr &
        [ INFLECTED #infl ] ].

FUT-lex-rule := future-lex-rule-super & infl-lex-rule &
  [ INFLECTED.FUT-OR-PRS-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

PRS-lex-rule := const-lex-rule & future-lex-rule-super &
  [ INFLECTED.FUT-OR-PRS-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

past-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ PAST-FLAG +,
                FUT-OR-PRS-FLAG #fut-or-prs ],
    DTR past-rule-dtr &
        [ INFLECTED.FUT-OR-PRS-FLAG #fut-or-prs ] ].

NON-PST-lex-rule := past-lex-rule-super &
  [ DTR.INFLECTED.FUT-OR-PRS-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

PST-lex-rule := past-lex-rule-super &
  [ DTR.INFLECTED.FUT-OR-PRS-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
